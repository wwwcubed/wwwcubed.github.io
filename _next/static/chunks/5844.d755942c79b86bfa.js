"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5844],{83287:function(e,t,r){r.d(t,{W:function(){return WagmiConnector}});var n=r(22555),i=r(54146);let WagmiConnector=class WagmiConnector extends i.Z{constructor(e){let{chains:t=n.gL9,options:r}=e;super(),this.chains=t,this.options=r}getBlockExplorerUrls(e){let t=e.explorers?.map(e=>e.url)??[];return t.length>0?t:void 0}isChainUnsupported(e){return!this.chains.some(t=>t.chainId===e)}updateChains(e){this.chains=e}}},83815:function(e,t,r){r.d(t,{A:function(){return AddChainError},C:function(){return ChainNotConfiguredError},R:function(){return ResourceUnavailableError},S:function(){return SwitchChainError},U:function(){return UserRejectedRequestError},a:function(){return ConnectorNotFoundError}});var n=r(69552);let RpcError=class RpcError extends Error{constructor(e,t){let{cause:r,code:n,data:i}=t;if(!Number.isInteger(n))throw Error('"code" must be an integer.');if(!e||"string"!=typeof e)throw Error('"message" must be a nonempty string.');super(`${e}. Cause: ${JSON.stringify(r)}`),this.cause=r,this.code=n,this.data=i}};let ProviderRpcError=class ProviderRpcError extends RpcError{constructor(e,t){let{cause:r,code:n,data:i}=t;if(!(Number.isInteger(n)&&n>=1e3&&n<=4999))throw Error('"code" must be an integer such that: 1000 <= code <= 4999');super(e,{cause:r,code:n,data:i})}};let AddChainError=class AddChainError extends Error{constructor(){super(...arguments),(0,n._)(this,"name","AddChainError"),(0,n._)(this,"message","Error adding chain")}};let ChainNotConfiguredError=class ChainNotConfiguredError extends Error{constructor(e){let{chainId:t,connectorId:r}=e;super(`Chain "${t}" not configured for connector "${r}".`),(0,n._)(this,"name","ChainNotConfigured")}};let ConnectorNotFoundError=class ConnectorNotFoundError extends Error{constructor(){super(...arguments),(0,n._)(this,"name","ConnectorNotFoundError"),(0,n._)(this,"message","Connector not found")}};let ResourceUnavailableError=class ResourceUnavailableError extends RpcError{constructor(e){super("Resource unavailable",{cause:e,code:-32002}),(0,n._)(this,"name","ResourceUnavailable")}};let SwitchChainError=class SwitchChainError extends ProviderRpcError{constructor(e){super("Error switching chain",{cause:e,code:4902}),(0,n._)(this,"name","SwitchChainError")}};let UserRejectedRequestError=class UserRejectedRequestError extends ProviderRpcError{constructor(e){super("User rejected request",{cause:e,code:4001}),(0,n._)(this,"name","UserRejectedRequestError")}}},59014:function(e,t,r){r.d(t,{n:function(){return normalizeChainId}});function normalizeChainId(e){return"string"==typeof e?Number.parseInt(e,"0x"===e.trim().substring(0,2)?16:10):"bigint"==typeof e?Number(e):e}},35844:function(e,t,r){r.d(t,{BloctoConnector:function(){return BloctoConnector}});var n=r(69552),i=r(83287),o=r(83815),s=r(40562),c=r(19485),a=r(241),h=r(16441),d=r(26340),u=r(81764),l=r(59014);r(54146);let BloctoConnector=class BloctoConnector extends i.W{constructor(e){let{chains:t,options:r={}}=e;super({chains:t,options:r}),(0,n._)(this,"id",d.w.blocto),(0,n._)(this,"name","Blocto"),(0,n._)(this,"ready",!0),this._onAccountsChangedBind=this.onAccountsChanged.bind(this),this._onChainChangedBind=this.onChainChanged.bind(this),this._onDisconnectBind=this.onDisconnect.bind(this)}async connect(e){try{let t=await this.getProvider(e);this.setupListeners(),this.emit("message",{type:"connecting"});let r=await t.request({method:"eth_requestAccounts"}),n=c.getAddress(r[0]),i=await this.getChainId(),o=this.isChainUnsupported(i);return{account:n,chain:{id:i,unsupported:o},provider:t}}catch(e){if(this._handleConnectReset(),this._isUserRejectedRequestError(e))throw new o.U(e);throw e}}async disconnect(){let e=await this.getProvider();await e.request({method:"wallet_disconnect"}),this.removeListeners(),this._handleConnectReset()}async getAccount(){let e=await this.getProvider(),t=await e.request({method:"eth_accounts"}),[r]=t||[];if(!r)throw Error("No accounts found");return r}async getChainId(){let e=await this.getProvider(),t=await e.request({method:"eth_chainId"});return(0,l.n)(t)}getProvider(){let{chainId:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!this._provider){let t=e??this.options.chainId??this.chains[0]?.chainId??1,r=this.chains.find(e=>e.chainId===t)?.rpc[0];this._provider=new s.Z({ethereum:{chainId:t,rpc:r},appId:this.options.appId})?.ethereum}if(!this._provider)throw new o.a;return Promise.resolve(this._provider)}async getSigner(){let{chainId:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},[t,r]=await Promise.all([this.getProvider(),this.getAccount()]);return new a.Q(t,e).getSigner(r)}async isAuthorized(){return!!this._provider?._blocto?.sessionKey??!1}async switchChain(e){let t=await this.getProvider(),r=h.hexValue(e),n=this.chains.find(t=>t.chainId===e);if(!n)throw new o.S(Error("chain not found on connector."));let i=t._blocto.supportNetworkList[`${e}`];if(!i)throw new o.S(Error(`Blocto unsupported chain: ${r}`));try{return await t.request({method:"wallet_addEthereumChain",params:[{chainId:r,rpcUrls:(0,u.g)(n)}]}),await t.request({method:"wallet_switchEthereumChain",params:[{chainId:r}]}),n}catch(e){if(this._isUserRejectedRequestError(e))throw new o.U(e);throw new o.S(e)}}onAccountsChanged(){}async onChainChanged(e){let t=(0,l.n)(e),r=this.isChainUnsupported(t),n=await this.getAccount();this.emit("change",{chain:{id:t,unsupported:r},account:n})}onDisconnect(){this.emit("disconnect")}async setupListeners(){let e=await this.getProvider();e.on("accountsChanged",this._onAccountsChangedBind),e.on("chainChanged",this._onChainChangedBind),e.on("disconnect",this._onDisconnectBind)}async removeListeners(){let e=await this.getProvider();e.off("accountsChanged",this._onAccountsChangedBind),e.off("chainChanged",this._onChainChangedBind),e.off("disconnect",this._onDisconnectBind)}_isUserRejectedRequestError(e){return/(user rejected)/i.test(e.message)}_handleConnectReset(){this._provider=void 0}}}}]);