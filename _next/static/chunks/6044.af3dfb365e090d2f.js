"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6044],{83287:function(e,t,i){i.d(t,{W:function(){return WagmiConnector}});var s=i(22555),r=i(54146);let WagmiConnector=class WagmiConnector extends r.Z{constructor(e){let{chains:t=s.gL9,options:i}=e;super(),this.chains=t,this.options=i}getBlockExplorerUrls(e){let t=e.explorers?.map(e=>e.url)??[];return t.length>0?t:void 0}isChainUnsupported(e){return!this.chains.some(t=>t.chainId===e)}updateChains(e){this.chains=e}}},83815:function(e,t,i){i.d(t,{A:function(){return AddChainError},C:function(){return ChainNotConfiguredError},R:function(){return ResourceUnavailableError},S:function(){return SwitchChainError},U:function(){return UserRejectedRequestError},a:function(){return ConnectorNotFoundError}});var s=i(69552);let RpcError=class RpcError extends Error{constructor(e,t){let{cause:i,code:s,data:r}=t;if(!Number.isInteger(s))throw Error('"code" must be an integer.');if(!e||"string"!=typeof e)throw Error('"message" must be a nonempty string.');super(`${e}. Cause: ${JSON.stringify(i)}`),this.cause=i,this.code=s,this.data=r}};let ProviderRpcError=class ProviderRpcError extends RpcError{constructor(e,t){let{cause:i,code:s,data:r}=t;if(!(Number.isInteger(s)&&s>=1e3&&s<=4999))throw Error('"code" must be an integer such that: 1000 <= code <= 4999');super(e,{cause:i,code:s,data:r})}};let AddChainError=class AddChainError extends Error{constructor(){super(...arguments),(0,s._)(this,"name","AddChainError"),(0,s._)(this,"message","Error adding chain")}};let ChainNotConfiguredError=class ChainNotConfiguredError extends Error{constructor(e){let{chainId:t,connectorId:i}=e;super(`Chain "${t}" not configured for connector "${i}".`),(0,s._)(this,"name","ChainNotConfigured")}};let ConnectorNotFoundError=class ConnectorNotFoundError extends Error{constructor(){super(...arguments),(0,s._)(this,"name","ConnectorNotFoundError"),(0,s._)(this,"message","Connector not found")}};let ResourceUnavailableError=class ResourceUnavailableError extends RpcError{constructor(e){super("Resource unavailable",{cause:e,code:-32002}),(0,s._)(this,"name","ResourceUnavailable")}};let SwitchChainError=class SwitchChainError extends ProviderRpcError{constructor(e){super("Error switching chain",{cause:e,code:4902}),(0,s._)(this,"name","SwitchChainError")}};let UserRejectedRequestError=class UserRejectedRequestError extends ProviderRpcError{constructor(e){super("User rejected request",{cause:e,code:4001}),(0,s._)(this,"name","UserRejectedRequestError")}}},76044:function(e,t,i){i.d(t,{WalletConnectConnector:function(){return WalletConnectConnector}});var s=i(69552),r=i(83815),n=i(19485),o=i(241),a=i(16441),h=i(26340),c=i(81764),d=i(83287);i(54146);let l=new Set([1,137,10,42161,56]),u="eip155",p="wagmi.requestedChains",g="wallet_addEthereumChain",C="last-used-chain-id";let WalletConnectConnector=class WalletConnectConnector extends d.W{constructor(e){super({...e,options:{isNewChainsStale:!0,...e.options}}),(0,s._)(this,"id",h.w.walletConnect),(0,s._)(this,"name","WalletConnect"),(0,s._)(this,"ready",!0),(0,s._)(this,"onAccountsChanged",e=>{0===e.length?this.emit("disconnect"):e[0]&&this.emit("change",{account:n.getAddress(e[0])})}),(0,s._)(this,"onChainChanged",async e=>{let t=Number(e),i=this.isChainUnsupported(t);await this._storage.setItem(C,String(e)),this.emit("change",{chain:{id:t,unsupported:i}})}),(0,s._)(this,"onDisconnect",async()=>{await this._setRequestedChainsIds([]),await this._storage.removeItem(C),this.emit("disconnect")}),(0,s._)(this,"onDisplayUri",e=>{this.emit("message",{type:"display_uri",data:e})}),(0,s._)(this,"onConnect",()=>{this.emit("connect",{provider:this._provider})}),this._storage=e.options.storage,this._createProvider(),this.filteredChains=this.chains.length>50?this.chains.filter(e=>l.has(e.chainId)):this.chains,this.showWalletConnectModal=!1!==this.options.qrcode}async connect(){let{chainId:e,pairingTopic:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{let i=e;if(!i){let e=await this._storage.getItem(C),t=e?parseInt(e):void 0;i=t&&!this.isChainUnsupported(t)?t:this.filteredChains[0]?.chainId}if(!i)throw Error("No chains found on connector.");let s=await this.getProvider();this.setupListeners();let r=await this._isChainsStale();if(s.session&&r&&await s.disconnect(),!s.session||r){let e=this.filteredChains.filter(e=>e.chainId!==i).map(e=>e.chainId);this.emit("message",{type:"connecting"}),await s.connect({pairingTopic:t,chains:[i],optionalChains:e.length>0?e:[i]}),await this._setRequestedChainsIds(this.filteredChains.map(e=>{let{chainId:t}=e;return t}))}let a=await s.enable();if(!a[0])throw Error("No accounts found on provider.");let h=n.getAddress(a[0]),c=await this.getChainId(),d=this.isChainUnsupported(c);return{account:h,chain:{id:c,unsupported:d},provider:new o.Q(s)}}catch(e){if(/user rejected/i.test(e?.message))throw new r.U(e);throw e}}async disconnect(){let cleanup=()=>{if("undefined"!=typeof localStorage)for(let e in localStorage)e.startsWith("wc@2")&&localStorage.removeItem(e)};cleanup();let e=await this.getProvider(),disconnectProvider=async()=>{try{await e.disconnect()}catch(e){if(!/No matching key/i.test(e.message))throw e}finally{this._removeListeners(),await this._setRequestedChainsIds([]),cleanup()}};disconnectProvider()}async getAccount(){let{accounts:e}=await this.getProvider();if(!e[0])throw Error("No accounts found on provider.");return n.getAddress(e[0])}async getChainId(){let{chainId:e}=await this.getProvider();return e}async getProvider(){let{chainId:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._provider||await this._createProvider(),e&&await this.switchChain(e),!this._provider)throw Error("No provider found.");return this._provider}async getSigner(){let{chainId:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},[t,i]=await Promise.all([this.getProvider({chainId:e}),this.getAccount()]);return new o.Q(t,e).getSigner(i)}async isAuthorized(){try{let[e,t]=await Promise.all([this.getAccount(),this.getProvider()]),i=await this._isChainsStale();if(!e)return!1;if(i&&t.session){try{await t.disconnect()}catch{}return!1}return!0}catch{return!1}}async switchChain(e){let t=this.chains.find(t=>t.chainId===e);if(!t)throw new r.S(`Chain with ID: ${e}, not found on connector.`);try{let i=await this.getProvider(),s=this._getNamespaceChainsIds(),r=this._getNamespaceMethods(),n=s.includes(e);if(!n&&r.includes(g)){let s=t.explorers&&t.explorers[0],r=s?{blockExplorerUrls:[s.url]}:{};await i.request({method:g,params:[{chainId:a.hexValue(t.chainId),chainName:t.name,nativeCurrency:t.nativeCurrency,rpcUrls:(0,c.g)(t),...r}]});let n=await this._getRequestedChainsIds();n.push(e),await this._setRequestedChainsIds(n)}return await i.request({method:"wallet_switchEthereumChain",params:[{chainId:a.hexValue(e)}]}),t}catch(t){let e="string"==typeof t?t:t?.message;if(/user rejected request/i.test(e))throw new r.U(t);throw new r.S(t)}}async _createProvider(){return this._initProviderPromise||(this._initProviderPromise=this.initProvider()),this._initProviderPromise}async initProvider(){let{default:e,OPTIONAL_EVENTS:t,OPTIONAL_METHODS:s}=await i.e(2692).then(i.bind(i,32692)),[r,...n]=this.filteredChains.map(e=>{let{chainId:t}=e;return t});r&&(this._provider=await e.init({showQrModal:this.showWalletConnectModal,projectId:this.options.projectId,optionalMethods:s,optionalEvents:t,chains:[r],optionalChains:n,metadata:{name:this.options.dappMetadata.name,description:this.options.dappMetadata.description||"",url:this.options.dappMetadata.url,icons:[this.options.dappMetadata.logoUrl||""]},rpcMap:Object.fromEntries(this.filteredChains.map(e=>[e.chainId,e.rpc[0]||""])),qrModalOptions:this.options.qrModalOptions}))}async _isChainsStale(){let e=this._getNamespaceMethods();if(e.includes(g)||!this.options.isNewChainsStale)return!1;let t=await this._getRequestedChainsIds(),i=this.filteredChains.map(e=>{let{chainId:t}=e;return t}),s=this._getNamespaceChainsIds();return(!s.length||!!s.some(e=>i.includes(e)))&&!i.every(e=>t.includes(e))}async setupListeners(){this._provider&&(this._removeListeners(),this._provider.on("accountsChanged",this.onAccountsChanged),this._provider.on("chainChanged",this.onChainChanged),this._provider.on("disconnect",this.onDisconnect),this._provider.on("session_delete",this.onDisconnect),this._provider.on("display_uri",this.onDisplayUri),this._provider.on("connect",this.onConnect))}_removeListeners(){this._provider&&(this._provider.removeListener("accountsChanged",this.onAccountsChanged),this._provider.removeListener("chainChanged",this.onChainChanged),this._provider.removeListener("disconnect",this.onDisconnect),this._provider.removeListener("session_delete",this.onDisconnect),this._provider.removeListener("display_uri",this.onDisplayUri),this._provider.removeListener("connect",this.onConnect))}async _setRequestedChainsIds(e){await this._storage.setItem(p,JSON.stringify(e))}async _getRequestedChainsIds(){let e=await this._storage.getItem(p);return e?JSON.parse(e):[]}_getNamespaceChainsIds(){if(!this._provider)return[];let e=this._provider.session?.namespaces[u]?.chains?.map(e=>parseInt(e.split(":")[1]||""));return e??[]}_getNamespaceMethods(){if(!this._provider)return[];let e=this._provider.session?.namespaces[u]?.methods;return e??[]}}}}]);