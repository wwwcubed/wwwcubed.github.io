"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9498],{59014:function(t,e,i){i.d(e,{n:function(){return normalizeChainId}});function normalizeChainId(t){return"string"==typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"==typeof t?Number(t):t}},89498:function(t,e,i){i.d(e,{LocalWalletConnector:function(){return LocalWalletConnector}});var n=i(69552),s=i(59014),r=i(27021),a=i(66964),o=i(31665),h=i(48088),c=i(56371);i(54146);let WrappedSigner=class WrappedSigner extends h.Signer{constructor(t){super(),this.signer=t,(0,c.defineReadOnly)(this,"provider",t.provider)}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new WrappedSigner(this.signer.connect(t))}_signTypedData(t,e,i){return this.signer._signTypedData(t,e,i)}async sendTransaction(t){if(!this.provider)throw Error("Provider not found");let e=await (0,a.g)(this.provider),i={...e,...t};return await this.signer.sendTransaction(i)}};let LocalWalletConnector=class LocalWalletConnector extends r.C{constructor(t){super(),(0,n._)(this,"id","local_wallet"),(0,n._)(this,"name","Local Wallet"),(0,n._)(this,"shimDisconnectKey","localWallet.shimDisconnect"),(0,n._)(this,"onChainChanged",t=>{let e=(0,s.n)(t),i=!this.options.chains.find(t=>t.chainId===e);this.emit("change",{chain:{id:e,unsupported:i}})}),this.options=t}async connect(t){t.chainId&&this.switchChain(t.chainId);let e=await this.getSigner(),i=await e.getAddress();return i}async disconnect(){this._provider=void 0,this._signer=void 0}async getAddress(){let t=await this.getSigner();if(!t)throw Error("No signer found");return await t.getAddress()}async isConnected(){try{let t=await this.getAddress();return!!t}catch{return!1}}async getProvider(){return this._provider||(this._provider=(0,o.a_)(this.options.chain,{clientId:this.options.clientId,secretKey:this.options.secretKey})),this._provider}async getSigner(){if(!this._signer){let t=await this.getProvider();this._signer=getSignerFromEthersWallet(this.options.ethersWallet,t)}return this._signer}async switchChain(t){let e=this.options.chains.find(e=>e.chainId===t);if(!e)throw Error(`Chain not found for chainId ${t}, please add it to the chains property when creating this wallet`);this._provider=(0,o.a_)(e,{clientId:this.options.clientId,secretKey:this.options.secretKey}),this._signer=getSignerFromEthersWallet(this.options.ethersWallet,this._provider),this.onChainChanged(t)}async setupListeners(){}updateChains(t){this.options.chains=t}};function getSignerFromEthersWallet(t,e){let i=t;return e&&(i=t.connect(e)),new WrappedSigner(i)}}}]);